#week4作业
#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
#目标输出;顺序不重要
# target = [
#     ['经常', '有意见', '分歧'],
#     ['经常', '有意见', '分', '歧'],
#     ['经常', '有', '意见', '分歧'],
#     ['经常', '有', '意见', '分', '歧'],
#     ['经常', '有', '意', '见分歧'],
#     ['经常', '有', '意', '见', '分歧'],
#     ['经常', '有', '意', '见', '分', '歧'],
#     ['经', '常', '有意见', '分歧'],
#     ['经', '常', '有意见', '分', '歧'],
#     ['经', '常', '有', '意见', '分歧'],
#     ['经', '常', '有', '意见', '分', '歧'],
#     ['经', '常', '有', '意', '见分歧'],
#     ['经', '常', '有', '意', '见', '分歧'],
#     ['经', '常', '有', '意', '见', '分', '歧']
# ]

Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}

#待切分文本
sentence = "经常有意见分歧"

#实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut(sentence, Dict):
    # 存储所有切分结果
    results = []
    # 当前路径（已切分的词列表）
    path = []

    # 内部DFS递归函数
    def dfs(start_idx):
        # 递归终点：已切分到句子末尾
        if start_idx == len(sentence):
            results.append(path[:])  # 添加当前切分路径的拷贝
            return

        # 尝试所有可能的结束位置（从当前位置到句子末尾）
        for end_idx in range(start_idx + 1, len(sentence) + 1):
            word = sentence[start_idx:end_idx]

            # 如果当前子词在词典中
            if word in Dict:
                path.append(word)  # 添加到当前路径
                dfs(end_idx)  # 递归处理剩余部分
                path.pop()  # 回溯：移除最后添加的词

    # 从句子开头开始DFS
    dfs(0)
    return results

# 获取所有切分结果
results = all_cut(sentence, Dict)

# 打印所有切分方式
for i, seg in enumerate(results, 1):
    print(f"{i:2d}: {seg}")



