#week3作业

#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改

Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}


#实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut(sentence, dict):
    #TODO
    results = []
    
    def backtrack(start, path):
        if start == len(sentence):
            results.append(path[:])
            return
        
        # 尝试从当前位置开始的所有可能长度的词
        for end in range(start + 1, len(sentence) + 1):
            word = sentence[start:end]
            # 如果当前词在词典中或者是单字，继续递归
            if word in dict or len(word) == 1:
                path.append(word)
                backtrack(end, path)
                path.pop()
                
    backtrack(0, [])
    return results



#目标输出;顺序不重要
#待切分文本
sentence = "经常有意见分歧"

all_segmentations = all_cut(sentence, Dict)
print(f"句子: {sentence}")
print(f"全切分结果数量: {len(all_segmentations)}")

# 输出所有切分方式
for i, segmentation in enumerate(all_segmentations):
    print(f"  切分 {i+1}: {' / '.join(segmentation)}")
    
    
target = [
    ['经常', '有意见', '分歧'],
    ['经常', '有意见', '分', '歧'],
    ['经常', '有', '意见', '分歧'],
    ['经常', '有', '意见', '分', '歧'],
    ['经常', '有', '意', '见分歧'],
    ['经常', '有', '意', '见', '分歧'],
    ['经常', '有', '意', '见', '分', '歧'],
    ['经', '常', '有意见', '分歧'],
    ['经', '常', '有意见', '分', '歧'],
    ['经', '常', '有', '意见', '分歧'],
    ['经', '常', '有', '意见', '分', '歧'],
    ['经', '常', '有', '意', '见分歧'],
    ['经', '常', '有', '意', '见', '分歧'],
    ['经', '常', '有', '意', '见', '分', '歧']
]
