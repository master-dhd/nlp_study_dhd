#词典；每个词后方存储的是其词频，词频仅为示例，不会用到，也可自行修改
Dict = {"经常":0.1,
        "经":0.05,
        "有":0.1,
        "常":0.001,
        "有意见":0.1,
        "歧":0.001,
        "意见":0.2,
        "分歧":0.2,
        "见":0.05,
        "意":0.05,
        "见分歧":0.05,
        "分":0.1}

#待切分文本
sentence = "经常有意见分歧"

#实现全切分函数，输出根据字典能够切分出的所有的切分方式
def all_cut(sentence, Dict):
    # 存储每个位置的所有切分结果
    memo = [[] for _ in range(len(sentence) + 1)]
    # 句子末尾是一个有效的切分点
    memo[len(sentence)] = [[]]
    
    # 从后向前处理每个位置
    for start in range(len(sentence) - 1, -1, -1):
        # 尝试所有可能的词
        for end in range(start + 1, len(sentence) + 1):
            word = sentence[start:end]
            # 如果是词典中的词，且后面部分有有效切分
            if word in Dict and memo[end]:
                # 将当前词与后面部分的所有切分组合
                for seg in memo[end]:
                    memo[start].append([word] + seg)
    
    # 返回从句子开头的所有切分方式
    return memo[0]

words = all_cut(sentence, Dict)
print(f"共找到 {len(words)} 种切分方式")
for i, word_list in enumerate(words):
    print(f"切分方式 {i+1}: {' / '.join(word_list)}")

#目标输出;顺序不重要
# target = [
#     ['经常', '有意见', '分歧'],
#     ['经常', '有意见', '分', '歧'],
#     ['经常', '有', '意见', '分歧'],
#     ['经常', '有', '意见', '分', '歧'],
#     ['经常', '有', '意', '见分歧'],
#     ['经常', '有', '意', '见', '分歧'],
#     ['经常', '有', '意', '见', '分', '歧'],
#     ['经', '常', '有意见', '分歧'],
#     ['经', '常', '有意见', '分', '歧'],
#     ['经', '常', '有', '意见', '分歧'],
#     ['经', '常', '有', '意见', '分', '歧'],
#     ['经', '常', '有', '意', '见分歧'],
#     ['经', '常', '有', '意', '见', '分歧'],
#     ['经', '常', '有', '意', '见', '分', '歧']
# ]

